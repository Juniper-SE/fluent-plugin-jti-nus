# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: bbe-smgd_sub_mgmt_network_stats_oc.proto

require 'google/protobuf'

require 'telemetry_top_pb'


descriptor_data = "\n(bbe-smgd_sub_mgmt_network_stats_oc.proto\x1a\x13telemetry_top.proto\"\x97\x39\n\x13junos_network_stats\x12\x31\n\x06system\x18\x97\x01 \x01(\x0b\x32 .junos_network_stats.system_type\x1a\xcc\x38\n\x0bsystem_type\x12[\n\x15subscriber_management\x18\x97\x01 \x01(\x0b\x32;.junos_network_stats.system_type.subscriber_management_type\x1a\xdf\x37\n\x1asubscriber_management_type\x12Z\n\x07uplanes\x18\x97\x01 \x01(\x0b\x32H.junos_network_stats.system_type.subscriber_management_type.uplanes_type\x1a\xe4\x36\n\x0cuplanes_type\x12\x65\n\x06uplane\x18\x97\x01 \x03(\x0b\x32T.junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list\x1a\xec\x35\n\x0buplane_list\x12\x18\n\tuplane_id\x18\x33 \x01(\rB\x05\x82@\x02\x08\x01\x12o\n\x05infra\x18\x97\x01 \x01(\x0b\x32_.junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type\x1a\xd1\x34\n\ninfra_type\x12~\n\x07network\x18\x97\x01 \x01(\x0b\x32l.junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type\x1a\xc2\x33\n\x0cnetwork_type\x12\x81\x01\n\x02io\x18\x97\x01 \x01(\x0b\x32t.junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.io_type\x12\x85\x01\n\x04\x64hcp\x18\x98\x01 \x01(\x0b\x32v.junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.dhcp_type\x12\x83\x01\n\x03ppp\x18\x99\x01 \x01(\x0b\x32u.junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.ppp_type\x12\x87\x01\n\x05pppoe\x18\x9a\x01 \x01(\x0b\x32w.junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.pppoe_type\x12\x87\x01\n\x05\x64vlan\x18\x9c\x01 \x01(\x0b\x32w.junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.dvlan_type\x12\x85\x01\n\x04l2tp\x18\x9b\x01 \x01(\x0b\x32v.junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.l2tp_type\x12\x83\x01\n\x03hag\x18\x9d\x01 \x01(\x0b\x32u.junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.hag_type\x1a\xc6\x08\n\x07io_type\x12\x19\n\x11l2_rx_packets_cnt\x18\x33 \x01(\x04\x12\x1c\n\x14l2_rx_packets_failed\x18\x34 \x01(\x04\x12\x1b\n\x13l2_rx_malformed_cnt\x18\x35 \x01(\x04\x12\x19\n\x11l2_rx_ifd_invalid\x18\x36 \x01(\x04\x12\x19\n\x11l2_rx_ifl_invalid\x18\x37 \x01(\x04\x12\x18\n\x10l2_rx_no_iff_cnt\x18\x38 \x01(\x04\x12\x1e\n\x16l2_rx_if_create_failed\x18\x39 \x01(\x04\x12/\n\'l2_bbe_io_rcv_l3_unknown_address_family\x18: \x01(\x04\x12\'\n\x1fl2_rx_unsupported_inet_protocol\x18; \x01(\x04\x12(\n l2_rx_unsupported_inet6_protocol\x18< \x01(\x04\x12&\n\x1el2_rx_unsupported_udp_protocol\x18= \x01(\x04\x12!\n\x19l2_rx_unsupported_punt_af\x18> \x01(\x04\x12#\n\x1bl2_rx_v4_data_path_punt_pkt\x18? \x01(\x04\x12(\n l2_rx_v4_data_path_punt_pkt_drop\x18@ \x01(\x04\x12#\n\x1bl2_rx_v6_data_path_punt_pkt\x18\x41 \x01(\x04\x12(\n l2_rx_v6_data_path_punt_pkt_drop\x18\x42 \x01(\x04\x12\x19\n\x11l2_tx_packets_cnt\x18\x43 \x01(\x04\x12\x1b\n\x13l2_tx_malformed_cnt\x18\x44 \x01(\x04\x12\x18\n\x10l2_tx_no_ifd_cnt\x18\x45 \x01(\x04\x12\x19\n\x11l2_tx_ifl_invalid\x18\x46 \x01(\x04\x12 \n\x18l2_bbe_io_send_tx_failed\x18G \x01(\x04\x12(\n l2_bbe_io_send_tx_failed_partial\x18H \x01(\x04\x12%\n\x1dl2_tx_v4_out_error_local_intf\x18I \x01(\x04\x12%\n\x1dl2_tx_v6_out_error_local_intf\x18J \x01(\x04\x12\x18\n\x10l3_rx_packet_cnt\x18K \x01(\x04\x12\"\n\x1al3_rx_unsupported_protocol\x18L \x01(\x04\x12\x18\n\x10l3_tx_packet_cnt\x18M \x01(\x04\x12\x19\n\x11l3_tx_send_failed\x18N \x01(\x04\x12\x1f\n\x17l3_tx_v4_kernel_forward\x18O \x01(\x04\x12%\n\x1dl3_tx_v4_kernel_forward_drops\x18P \x01(\x04\x12\x1f\n\x17l3_tx_v6_kernel_forward\x18Q \x01(\x04\x12%\n\x1dl3_tx_v6_kernel_forward_drops\x18R \x01(\x04\x1a\xbc\x03\n\tdhcp_type\x12\x15\n\rrx_packet_cnt\x18\x33 \x01(\x04\x12\x11\n\tera_drops\x18\x34 \x01(\x04\x12\x18\n\x10rx_no_connection\x18\x35 \x01(\x04\x12\x18\n\x10rx_malformed_cnt\x18\x36 \x01(\x04\x12\x14\n\x0crx_no_if_cnt\x18\x37 \x01(\x04\x12\x16\n\x0erx_ifl_invalid\x18\x38 \x01(\x04\x12\x16\n\x0erx_send_failed\x18\x39 \x01(\x04\x12\x15\n\rtx_packet_cnt\x18: \x01(\x04\x12\x1b\n\x13packets_transmitted\x18; \x01(\x04\x12\x18\n\x10tx_malformed_cnt\x18< \x01(\x04\x12\x13\n\x0btx_null_pkt\x18= \x01(\x04\x12\x14\n\x0ctx_no_if_cnt\x18> \x01(\x04\x12\x15\n\rtx_no_iff_cnt\x18? \x01(\x04\x12\x15\n\rtx_no_rtt_cnt\x18@ \x01(\x04\x12\x15\n\rtx_arp_failed\x18\x41 \x01(\x04\x12\x15\n\rtx_if_invalid\x18\x42 \x01(\x04\x12\x16\n\x0etx_send_failed\x18\x43 \x01(\x04\x12\x1e\n\x16rx_while_not_connected\x18\x44 \x01(\x04\x1a\xef\x0b\n\x08ppp_type\x12\x1a\n\x12rx_network_pkt_cnt\x18\x33 \x01(\x04\x12\x19\n\x11rx_plugin_pkt_cnt\x18\x34 \x01(\x04\x12\x1b\n\x13rx_lcp_conf_req_cnt\x18\x35 \x01(\x04\x12\x1b\n\x13rx_lcp_conf_ack_cnt\x18\x36 \x01(\x04\x12\x1c\n\x14rx_lcp_conf_nack_cnt\x18\x37 \x01(\x04\x12\x1b\n\x13rx_lcp_conf_rej_cnt\x18\x38 \x01(\x04\x12\x1b\n\x13rx_lcp_term_req_cnt\x18\x39 \x01(\x04\x12\x1b\n\x13rx_lcp_term_ack_cnt\x18: \x01(\x04\x12\x1b\n\x13rx_lcp_code_rej_cnt\x18; \x01(\x04\x12\x1f\n\x17rx_lcp_protocol_rej_cnt\x18< \x01(\x04\x12\x1b\n\x13rx_lcp_echo_req_cnt\x18= \x01(\x04\x12\x1d\n\x15rx_lcp_echo_reply_cnt\x18> \x01(\x04\x12\x1e\n\x16rx_lcp_discard_req_cnt\x18? \x01(\x04\x12\x16\n\x0erx_pap_req_cnt\x18@ \x01(\x04\x12\x16\n\x0erx_pap_ack_cnt\x18\x41 \x01(\x04\x12\x17\n\x0frx_pap_nack_cnt\x18\x42 \x01(\x04\x12\x1d\n\x15rx_chap_challenge_cnt\x18\x43 \x01(\x04\x12\x18\n\x10rx_chap_resp_cnt\x18\x44 \x01(\x04\x12\x1b\n\x13rx_chap_success_cnt\x18\x45 \x01(\x04\x12\x1b\n\x13rx_chap_failure_cnt\x18\x46 \x01(\x04\x12\x17\n\x0frx_ipcp_req_cnt\x18G \x01(\x04\x12\x17\n\x0frx_ipcp_ack_cnt\x18H \x01(\x04\x12\x18\n\x10rx_ipcp_nack_cnt\x18I \x01(\x04\x12\x19\n\x11rx_ipv6cp_req_cnt\x18J \x01(\x04\x12\x19\n\x11rx_ipv6cp_ack_cnt\x18K \x01(\x04\x12\x1a\n\x12rx_ipv6cp_nack_cnt\x18L \x01(\x04\x12\x18\n\x10rx_malformed_cnt\x18M \x01(\x04\x12\x14\n\x0crx_no_if_cnt\x18N \x01(\x04\x12\x16\n\x0erx_unsupported\x18O \x01(\x04\x12\x0e\n\x06tx_cnt\x18P \x01(\x04\x12\x1b\n\x13tx_lcp_conf_req_cnt\x18Q \x01(\x04\x12\x1b\n\x13tx_lcp_conf_ack_cnt\x18R \x01(\x04\x12\x1c\n\x14tx_lcp_conf_nack_cnt\x18S \x01(\x04\x12\x1b\n\x13tx_lcp_conf_rej_cnt\x18T \x01(\x04\x12\x1b\n\x13tx_lcp_echo_req_cnt\x18U \x01(\x04\x12\x1d\n\x15tx_lcp_echo_reply_cnt\x18V \x01(\x04\x12\x1e\n\x16tx_lcp_discard_req_cnt\x18W \x01(\x04\x12\x1b\n\x13tx_lcp_term_req_cnt\x18X \x01(\x04\x12\x1b\n\x13tx_lcp_term_ack_cnt\x18Y \x01(\x04\x12\x16\n\x0etx_pap_req_cnt\x18Z \x01(\x04\x12\x16\n\x0etx_pap_ack_cnt\x18[ \x01(\x04\x12\x17\n\x0ftx_pap_nack_cnt\x18\\ \x01(\x04\x12\x1d\n\x15tx_chap_challenge_cnt\x18] \x01(\x04\x12\x18\n\x10tx_chap_resp_cnt\x18^ \x01(\x04\x12\x1b\n\x13tx_chap_success_cnt\x18_ \x01(\x04\x12\x1b\n\x13tx_chap_failure_cnt\x18` \x01(\x04\x12\x17\n\x0ftx_ipcp_req_cnt\x18\x61 \x01(\x04\x12\x17\n\x0ftx_ipcp_ack_cnt\x18\x62 \x01(\x04\x12\x18\n\x10tx_ipcp_nack_cnt\x18\x63 \x01(\x04\x12\x19\n\x11tx_ipv6cp_req_cnt\x18\x64 \x01(\x04\x12\x19\n\x11tx_ipv6cp_ack_cnt\x18\x65 \x01(\x04\x12\x1a\n\x12tx_ipv6cp_nack_cnt\x18\x66 \x01(\x04\x12\x1a\n\x12tx_unknown_pkt_cnt\x18g \x01(\x04\x12\x16\n\x0etx_send_failed\x18h \x01(\x04\x12\x18\n\x10tx_malformed_cnt\x18i \x01(\x04\x1a\xe8\x01\n\npppoe_type\x12\x0e\n\x06rx_cnt\x18\x33 \x01(\x04\x12\x13\n\x0brx_padi_cnt\x18\x34 \x01(\x04\x12\x13\n\x0brx_padr_cnt\x18\x35 \x01(\x04\x12\x12\n\nrx_ppp_cnt\x18\x36 \x01(\x04\x12\x18\n\x10rx_malformed_cnt\x18\x37 \x01(\x04\x12\x14\n\x0crx_no_if_cnt\x18\x38 \x01(\x04\x12\x16\n\x0erx_unsupported\x18\x39 \x01(\x04\x12\x1c\n\x14rx_padi_era_discards\x18: \x01(\x04\x12\x0e\n\x06tx_cnt\x18; \x01(\x04\x12\x16\n\x0etx_send_failed\x18< \x01(\x04\x1a#\n\ndvlan_type\x12\x15\n\rrx_packet_cnt\x18\x33 \x01(\x04\x1a\x8e\x0c\n\tl2tp_type\x12\x0e\n\x06rx_cnt\x18\x33 \x01(\x04\x12\x12\n\nrx_pkt_cnt\x18\x34 \x01(\x04\x12\x16\n\x0eppp_rx_pkt_cnt\x18\x35 \x01(\x04\x12\x12\n\ntx_pkt_cnt\x18\x36 \x01(\x04\x12!\n\x19ppp_rx_lcp_conf_req_count\x18\x37 \x01(\x04\x12!\n\x19ppp_rx_lcp_conf_ack_count\x18\x38 \x01(\x04\x12\"\n\x1appp_rx_lcp_conf_nack_count\x18\x39 \x01(\x04\x12!\n\x19ppp_rx_lcp_term_req_count\x18: \x01(\x04\x12!\n\x19ppp_rx_lcp_term_ack_count\x18; \x01(\x04\x12!\n\x19ppp_rx_lcp_echo_req_count\x18< \x01(\x04\x12\"\n\x1appp_rx_lcp_echo_resp_count\x18= \x01(\x04\x12\x1c\n\x14ppp_rx_pap_req_count\x18> \x01(\x04\x12\x1c\n\x14ppp_rx_pap_ack_count\x18? \x01(\x04\x12\x1d\n\x15ppp_rx_pap_nack_count\x18@ \x01(\x04\x12#\n\x1bppp_rx_chap_challenge_count\x18\x41 \x01(\x04\x12\x1e\n\x16ppp_rx_chap_resp_count\x18\x42 \x01(\x04\x12!\n\x19ppp_rx_chap_success_count\x18\x43 \x01(\x04\x12\x1e\n\x16ppp_rx_chap_fail_count\x18\x44 \x01(\x04\x12\"\n\x1appp_rx_ipcp_conf_req_count\x18\x45 \x01(\x04\x12\"\n\x1appp_rx_ipcp_conf_ack_count\x18\x46 \x01(\x04\x12#\n\x1bppp_rx_ipcp_conf_nack_count\x18G \x01(\x04\x12\x18\n\x10rx_malformed_cnt\x18H \x01(\x04\x12\x1f\n\x17ppp_rx_unknown_protocol\x18I \x01(\x04\x12\x12\n\nrx_msg_cnt\x18J \x01(\x04\x12\x1b\n\x13rx_msg_processd_cnt\x18K \x01(\x04\x12\x12\n\nrx_msg_err\x18L \x01(\x04\x12\x1a\n\x12rx_invalid_msg_cnt\x18M \x01(\x04\x12\x0e\n\x06tx_cnt\x18N \x01(\x04\x12!\n\x19ppp_tx_lcp_conf_req_count\x18O \x01(\x04\x12!\n\x19ppp_tx_lcp_conf_ack_count\x18P \x01(\x04\x12\"\n\x1appp_tx_lcp_conf_nack_count\x18Q \x01(\x04\x12!\n\x19ppp_tx_lcp_echo_req_count\x18R \x01(\x04\x12\"\n\x1appp_tx_lcp_echo_resp_count\x18S \x01(\x04\x12!\n\x19ppp_tx_lcp_term_req_count\x18T \x01(\x04\x12!\n\x19ppp_tx_lcp_term_ack_count\x18U \x01(\x04\x12\x1c\n\x14ppp_tx_pap_req_count\x18V \x01(\x04\x12\x1c\n\x14ppp_tx_pap_ack_count\x18W \x01(\x04\x12\x1d\n\x15ppp_tx_pap_nack_count\x18X \x01(\x04\x12#\n\x1bppp_tx_chap_challenge_count\x18Y \x01(\x04\x12\x1e\n\x16ppp_tx_chap_resp_count\x18Z \x01(\x04\x12!\n\x19ppp_tx_chap_success_count\x18[ \x01(\x04\x12\x1e\n\x16ppp_tx_chap_fail_count\x18\\ \x01(\x04\x12\"\n\x1appp_tx_ipcp_conf_req_count\x18] \x01(\x04\x12\"\n\x1appp_tx_ipcp_conf_ack_count\x18^ \x01(\x04\x12#\n\x1bppp_tx_ipcp_conf_nack_count\x18_ \x01(\x04\x12\x1f\n\x17ppp_tx_unknown_protocol\x18` \x01(\x04\x12\x1a\n\x12tx_pkt_send_failed\x18\x61 \x01(\x04\x12\x12\n\ntx_pkt_err\x18\x62 \x01(\x04\x12\x12\n\ntx_msg_cnt\x18\x63 \x01(\x04\x12\x12\n\ntx_msg_err\x18\x64 \x01(\x04\x1a\xe2\x05\n\x08hag_type\x12\x1a\n\x12rx_network_pkt_cnt\x18\x33 \x01(\x04\x12\x1c\n\x14rx_malformed_pkt_cnt\x18\x34 \x01(\x04\x12\x18\n\x10rx_no_if_pkt_cnt\x18\x35 \x01(\x04\x12!\n\x19rx_send_succeeded_pkt_cnt\x18\x36 \x01(\x04\x12\x1e\n\x16rx_send_failed_pkt_cnt\x18\x37 \x01(\x04\x12\x1e\n\x16rx_unsupported_pkt_cnt\x18\x38 \x01(\x04\x12\x1c\n\x14rx_setup_request_cnt\x18\x39 \x01(\x04\x12\x18\n\x10rx_hello_pkt_cnt\x18: \x01(\x04\x12\x1c\n\x14rx_tear_down_pkt_cnt\x18; \x01(\x04\x12\x19\n\x11rx_notify_pkt_cnt\x18< \x01(\x04\x12\x1a\n\x12tx_network_pkt_cnt\x18= \x01(\x04\x12\x17\n\x0ftx_null_pkt_cnt\x18> \x01(\x04\x12\x18\n\x10tx_no_if_pkt_cnt\x18? \x01(\x04\x12!\n\x19tx_send_succeeded_pkt_cnt\x18@ \x01(\x04\x12\x1e\n\x16tx_send_failed_pkt_cnt\x18\x41 \x01(\x04\x12 \n\x18tx_setup_request_pkt_cnt\x18\x42 \x01(\x04\x12\x1f\n\x17tx_setup_accept_pkt_cnt\x18\x43 \x01(\x04\x12\x1d\n\x15tx_setup_deny_pkt_cnt\x18\x44 \x01(\x04\x12\x18\n\x10tx_hello_pkt_cnt\x18\x45 \x01(\x04\x12\x1c\n\x14tx_tear_down_pkt_cnt\x18\x46 \x01(\x04\x12\x19\n\x11tx_notify_pkt_cnt\x18G \x01(\x04\x12!\n\x19inflight_hag_sessions_cnt\x18H \x01(\x04\x12#\n\x1bsuccessful_hag_sessions_cnt\x18I \x01(\x04\x12\x1f\n\x17\x66\x61iled_hag_sessions_cnt\x18J \x01(\x04:S\n\x1cjnpr_junos_network_stats_ext\x12\x17.JuniperNetworksSensors\x18\' \x01(\x0b\x32\x14.junos_network_stats"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

Junos_network_stats = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("junos_network_stats").msgclass
Junos_network_stats::System_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("junos_network_stats.system_type").msgclass
Junos_network_stats::System_type::Subscriber_management_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("junos_network_stats.system_type.subscriber_management_type").msgclass
Junos_network_stats::System_type::Subscriber_management_type::Uplanes_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("junos_network_stats.system_type.subscriber_management_type.uplanes_type").msgclass
Junos_network_stats::System_type::Subscriber_management_type::Uplanes_type::Uplane_list = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list").msgclass
Junos_network_stats::System_type::Subscriber_management_type::Uplanes_type::Uplane_list::Infra_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type").msgclass
Junos_network_stats::System_type::Subscriber_management_type::Uplanes_type::Uplane_list::Infra_type::Network_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type").msgclass
Junos_network_stats::System_type::Subscriber_management_type::Uplanes_type::Uplane_list::Infra_type::Network_type::Io_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.io_type").msgclass
Junos_network_stats::System_type::Subscriber_management_type::Uplanes_type::Uplane_list::Infra_type::Network_type::Dhcp_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.dhcp_type").msgclass
Junos_network_stats::System_type::Subscriber_management_type::Uplanes_type::Uplane_list::Infra_type::Network_type::Ppp_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.ppp_type").msgclass
Junos_network_stats::System_type::Subscriber_management_type::Uplanes_type::Uplane_list::Infra_type::Network_type::Pppoe_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.pppoe_type").msgclass
Junos_network_stats::System_type::Subscriber_management_type::Uplanes_type::Uplane_list::Infra_type::Network_type::Dvlan_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.dvlan_type").msgclass
Junos_network_stats::System_type::Subscriber_management_type::Uplanes_type::Uplane_list::Infra_type::Network_type::L2tp_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.l2tp_type").msgclass
Junos_network_stats::System_type::Subscriber_management_type::Uplanes_type::Uplane_list::Infra_type::Network_type::Hag_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("junos_network_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.network_type.hag_type").msgclass
