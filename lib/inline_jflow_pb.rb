# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: inline_jflow.proto

require 'google/protobuf'

require 'telemetry_top_pb'


descriptor_data = "\n\x12inline_jflow.proto\x1a\x13telemetry_top.proto\"\x8f\x07\n\x0bInlineJflow\x12 \n\x18ipv4_flows_export_format\x18\x02 \x01(\t\x12 \n\x18ipv6_flows_export_format\x18\x03 \x01(\t\x12 \n\x18vpls_flows_export_format\x18\x04 \x01(\t\x12 \n\x18mpls_flows_export_format\x18\x05 \x01(\t\x12\x1d\n\x15ipv4_route_record_cnt\x18\x06 \x01(\r\x12\x1d\n\x15ipv6_route_record_cnt\x18\x07 \x01(\r\x12\x1d\n\x15mpls_route_record_cnt\x18\x08 \x01(\r\x12$\n\x1c\x61utonomous_system_record_cnt\x18\t \x01(\r\x12\x1c\n\x14ipv4_max_flows_count\x18\n \x01(\x04\x12\x1c\n\x14ipv6_max_flows_count\x18\x0b \x01(\x04\x12\x1c\n\x14vpls_max_flows_count\x18\x0c \x01(\x04\x12\x1c\n\x14mpls_max_flows_count\x18\r \x01(\x04\x12$\n\x15memory_alloc_fail_cnt\x18\x0e \x01(\rB\x05\x82@\x02\x18\x01\x12-\n%ipv4_configured_observation_domain_id\x18\x0f \x01(\r\x12-\n%ipv6_configured_observation_domain_id\x18\x10 \x01(\r\x12-\n%vpls_configured_observation_domain_id\x18\x11 \x01(\r\x12-\n%mpls_configured_observation_domain_id\x18\x12 \x01(\r\x12\x1c\n\x14last_clear_timestamp\x18\x13 \x01(\r\x12\x1f\n\x17ipv6_extended_attribute\x18\x14 \x01(\x08\x12\x1c\n\x14\x66lexible_flow_sizing\x18\x15 \x01(\x08\x12 \n\x18use_extended_flow_memory\x18\x16 \x01(\x08\x12\"\n\x1a\x62ridge_flows_export_format\x18\x17 \x01(\t\x12\x1e\n\x16\x62ridge_max_flows_count\x18\x18 \x01(\x04\x12/\n\'bridge_configured_observation_domain_id\x18\x19 \x01(\r\x12\'\n\tnpu_stats\x18\x32 \x03(\x0b\x32\x14.InlineJflowNpuStats\"\xfc\x16\n\x13InlineJflowNpuStats\x12\x16\n\x0enpu_identifier\x18\x01 \x02(\r\x12 \n\x11ipv4_flow_packets\x18\x33 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\x1e\n\x0fipv4_flow_bytes\x18\x34 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\x1f\n\x10ipv4_total_flows\x18\x35 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12 \n\x11ipv4_active_flows\x18\x36 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\"\n\x13ipv4_flows_exported\x18\x37 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12$\n\x15ipv4_packets_exported\x18\x38 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12,\n\x1dipv4_flows_inactive_timed_out\x18\x39 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12*\n\x1bipv4_flows_active_timed_out\x18: \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\'\n\x18ipv4_flow_create_failure\x18; \x01(\x04\x42\x05\x82@\x02\x18\x01\x12(\n\x19ipv4_route_lookup_failure\x18< \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\x34\n%ipv4_autonomous_system_lookup_failure\x18= \x01(\x04\x42\x05\x82@\x02\x18\x01\x12.\n\x1fipv4_flow_packet_export_failure\x18> \x01(\x04\x42\x05\x82@\x02\x18\x01\x12*\n\x1bipv4_flow_table_utilization\x18? \x01(\x02\x42\x05\x82@\x02 \x01\x12%\n\x16ipv4_flow_insert_count\x18@ \x01(\x04\x42\x05\x82@\x02\x18\x01\x12 \n\x11ipv6_flow_packets\x18\x65 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\x1e\n\x0fipv6_flow_bytes\x18\x66 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\x1f\n\x10ipv6_total_flows\x18g \x01(\x04\x42\x05\x82@\x02\x18\x01\x12 \n\x11ipv6_active_flows\x18h \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\"\n\x13ipv6_flows_exported\x18i \x01(\x04\x42\x05\x82@\x02\x18\x01\x12$\n\x15ipv6_packets_exported\x18j \x01(\x04\x42\x05\x82@\x02\x18\x01\x12,\n\x1dipv6_flows_inactive_timed_out\x18k \x01(\x04\x42\x05\x82@\x02\x18\x01\x12*\n\x1bipv6_flows_active_timed_out\x18l \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\'\n\x18ipv6_flow_create_failure\x18m \x01(\x04\x42\x05\x82@\x02\x18\x01\x12(\n\x19ipv6_route_lookup_failure\x18n \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\x34\n%ipv6_autonomous_system_lookup_failure\x18o \x01(\x04\x42\x05\x82@\x02\x18\x01\x12.\n\x1fipv6_flow_packet_export_failure\x18p \x01(\x04\x42\x05\x82@\x02\x18\x01\x12*\n\x1bipv6_flow_table_utilization\x18q \x01(\x02\x42\x05\x82@\x02 \x01\x12%\n\x16ipv6_flow_insert_count\x18r \x01(\x04\x42\x05\x82@\x02\x18\x01\x12!\n\x11vpls_flow_packets\x18\x97\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\x1f\n\x0fvpls_flow_bytes\x18\x98\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12 \n\x10vpls_total_flows\x18\x99\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12!\n\x11vpls_active_flows\x18\x9a\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12#\n\x13vpls_flows_exported\x18\x9b\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12%\n\x15vpls_packets_exported\x18\x9c\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12-\n\x1dvpls_flows_inactive_timed_out\x18\x9d\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12+\n\x1bvpls_flows_active_timed_out\x18\x9e\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12(\n\x18vpls_flow_create_failure\x18\x9f\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12)\n\x19vpls_route_lookup_failure\x18\xa0\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\x35\n%vpls_autonomous_system_lookup_failure\x18\xa1\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12/\n\x1fvpls_flow_packet_export_failure\x18\xa2\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12+\n\x1bvpls_flow_table_utilization\x18\xa3\x01 \x01(\x02\x42\x05\x82@\x02 \x01\x12&\n\x16vpls_flow_insert_count\x18\xa4\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12!\n\x11mpls_flow_packets\x18\xc9\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\x1f\n\x0fmpls_flow_bytes\x18\xca\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12 \n\x10mpls_total_flows\x18\xcb\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12!\n\x11mpls_active_flows\x18\xcc\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12#\n\x13mpls_flows_exported\x18\xcd\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12%\n\x15mpls_packets_exported\x18\xce\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12-\n\x1dmpls_flows_inactive_timed_out\x18\xcf\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12+\n\x1bmpls_flows_active_timed_out\x18\xd0\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12(\n\x18mpls_flow_create_failure\x18\xd1\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12)\n\x19mpls_route_lookup_failure\x18\xd2\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\x35\n%mpls_autonomous_system_lookup_failure\x18\xd3\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12/\n\x1fmpls_flow_packet_export_failure\x18\xd4\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12+\n\x1bmpls_flow_table_utilization\x18\xd5\x01 \x01(\x02\x42\x05\x82@\x02 \x01\x12&\n\x16mpls_flow_insert_count\x18\xd6\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12#\n\x13\x62ridge_flow_packets\x18\xfb\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12!\n\x11\x62ridge_flow_bytes\x18\xfc\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\"\n\x12\x62ridge_total_flows\x18\xfd\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12#\n\x13\x62ridge_active_flows\x18\xfe\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12%\n\x15\x62ridge_flows_exported\x18\xff\x01 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\'\n\x17\x62ridge_packets_exported\x18\x80\x02 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12/\n\x1f\x62ridge_flows_inactive_timed_out\x18\x81\x02 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12-\n\x1d\x62ridge_flows_active_timed_out\x18\x82\x02 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12*\n\x1a\x62ridge_flow_create_failure\x18\x83\x02 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12+\n\x1b\x62ridge_route_lookup_failure\x18\x84\x02 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\x37\n\'bridge_autonomous_system_lookup_failure\x18\x85\x02 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12\x31\n!bridge_flow_packet_export_failure\x18\x86\x02 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12-\n\x1d\x62ridge_flow_table_utilization\x18\x87\x02 \x01(\x02\x42\x05\x82@\x02 \x01\x12(\n\x18\x62ridge_flow_insert_count\x18\x88\x02 \x01(\x04\x42\x05\x82@\x02\x18\x01:E\n\x16inline_jflow_stats_ext\x12\x17.JuniperNetworksSensors\x18\t \x01(\x0b\x32\x0c.InlineJflow"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

InlineJflow = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("InlineJflow").msgclass
InlineJflowNpuStats = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("InlineJflowNpuStats").msgclass
