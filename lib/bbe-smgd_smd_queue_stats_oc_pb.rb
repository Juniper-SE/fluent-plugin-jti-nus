# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: bbe-smgd_smd_queue_stats_oc.proto

require 'google/protobuf'

require 'telemetry_top_pb'


descriptor_data = "\n!bbe-smgd_smd_queue_stats_oc.proto\x1a\x13telemetry_top.proto\"\xe0\x19\n\x11\x64\x65\x62ug_queue_stats\x12/\n\x06system\x18\x97\x01 \x01(\x0b\x32\x1e.debug_queue_stats.system_type\x1a\x99\x19\n\x0bsystem_type\x12Y\n\x15subscriber_management\x18\x97\x01 \x01(\x0b\x32\x39.debug_queue_stats.system_type.subscriber_management_type\x1a\xae\x18\n\x1asubscriber_management_type\x12X\n\x07uplanes\x18\x97\x01 \x01(\x0b\x32\x46.debug_queue_stats.system_type.subscriber_management_type.uplanes_type\x1a\xb5\x17\n\x0cuplanes_type\x12\x63\n\x06uplane\x18\x97\x01 \x03(\x0b\x32R.debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane_list\x1a\xbf\x16\n\x0buplane_list\x12\x18\n\tuplane_id\x18\x33 \x01(\rB\x05\x82@\x02\x08\x01\x12m\n\x05infra\x18\x97\x01 \x01(\x0b\x32].debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type\x1a\xa6\x15\n\ninfra_type\x12t\n\x03\x65ra\x18\x97\x01 \x01(\x0b\x32\x66.debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.era_type\x1a\xa1\x14\n\x08\x65ra_type\x12\x1f\n\x17io_to_smd_dvlan_q_count\x18\x33 \x01(\r\x12#\n\x1bio_to_smd_dvlan_max_q_count\x18\x34 \x01(\r\x12\x1c\n\x14io_to_smd_padi_q_cnt\x18\x35 \x01(\r\x12!\n\x19io_to_smd_padi_q_cnt_peak\x18\x36 \x01(\r\x12 \n\x18io_to_smd_discover_q_cnt\x18\x37 \x01(\r\x12%\n\x1dio_to_smd_discover_q_cnt_peak\x18\x38 \x01(\r\x12\x1f\n\x17io_to_smd_solicit_q_cnt\x18\x39 \x01(\r\x12$\n\x1cio_to_smd_solicit_q_cnt_peak\x18: \x01(\r\x12\x1c\n\x14io_to_smd_dhcp_q_cnt\x18; \x01(\r\x12!\n\x19io_to_smd_dhcp_q_cnt_peak\x18< \x01(\r\x12\x1b\n\x13io_to_smd_hag_q_cnt\x18= \x01(\r\x12 \n\x18io_to_smd_hag_q_cnt_peak\x18> \x01(\r\x12\x1d\n\x15io_to_smd_total_q_cnt\x18? \x01(\r\x12\"\n\x1aio_to_smd_total_q_cnt_peak\x18@ \x01(\r\x12\x19\n\x11smd_dvlan_q_count\x18\x41 \x01(\r\x12\x1d\n\x15smd_dvlan_max_q_count\x18\x42 \x01(\r\x12\x16\n\x0esmd_padi_q_cnt\x18\x43 \x01(\r\x12\x1b\n\x13smd_padi_q_cnt_peak\x18\x44 \x01(\r\x12\x1a\n\x12smd_discover_q_cnt\x18\x45 \x01(\r\x12\x1f\n\x17smd_discover_q_cnt_peak\x18\x46 \x01(\r\x12\x19\n\x11smd_solicit_q_cnt\x18G \x01(\r\x12\x1e\n\x16smd_solicit_q_cnt_peak\x18H \x01(\r\x12\x16\n\x0esmd_dhcp_q_cnt\x18I \x01(\r\x12\x1b\n\x13smd_dhcp_q_cnt_peak\x18J \x01(\r\x12\x15\n\rsmd_hag_q_cnt\x18K \x01(\r\x12\x1a\n\x12smd_hag_q_cnt_peak\x18L \x01(\r\x12\x17\n\x0fsmd_total_q_cnt\x18M \x01(\r\x12\x1c\n\x14smd_total_q_cnt_peak\x18N \x01(\r\x12\"\n\x1asmd_notification_queue_cnt\x18O \x01(\r\x12\'\n\x1fsmd_notification_queue_cnt_peak\x18P \x01(\r\x12\x1d\n\x15smd_message_queue_cnt\x18Q \x01(\r\x12\"\n\x1asmd_message_queue_cnt_peak\x18R \x01(\r\x12\x1c\n\x14smd_packet_queue_cnt\x18S \x01(\r\x12!\n\x19smd_packet_queue_cnt_peak\x18T \x01(\r\x12 \n\x18smd_packet_low_queue_cnt\x18U \x01(\r\x12%\n\x1dsmd_packet_low_queue_cnt_peak\x18V \x01(\r\x12\x18\n\x10io_pkt_count_low\x18W \x01(\x04\x12\x19\n\x11io_pkt_count_mlow\x18X \x01(\x04\x12\x18\n\x10io_pkt_count_med\x18Y \x01(\x04\x12\x19\n\x11io_pkt_count_high\x18Z \x01(\x04\x12\x1e\n\x16io_packets_dropped_low\x18[ \x01(\x04\x12\x1f\n\x17io_packets_dropped_mlow\x18\\ \x01(\x04\x12\x1e\n\x16io_packets_dropped_med\x18] \x01(\x04\x12\x1f\n\x17io_packets_dropped_high\x18^ \x01(\x04\x12$\n\x1cio_packets_dropped_padi_qlen\x18_ \x01(\x04\x12)\n!io_packets_dropped_padi_imbalance\x18` \x01(\x04\x12(\n io_packets_dropped_discover_qlen\x18\x61 \x01(\x04\x12-\n%io_packets_dropped_discover_imbalance\x18\x62 \x01(\x04\x12\'\n\x1fio_packets_dropped_solicit_qlen\x18\x63 \x01(\x04\x12,\n$io_packets_dropped_solicit_imbalance\x18\x64 \x01(\x04\x12%\n\x1dio_packets_dropped_dvlan_qlen\x18\x65 \x01(\x04\x12*\n\"io_packets_dropped_dvlan_imbalance\x18\x66 \x01(\x04\x12#\n\x1bio_packets_dropped_hag_qlen\x18g \x01(\x04\x12(\n io_packets_dropped_hag_imbalance\x18h \x01(\x04\x12%\n\x1dmax_allowed_in_flight_current\x18i \x01(\r\x12$\n\x1cmax_allowed_in_flight_actual\x18j \x01(\r\x12.\n&max_allowed_in_flight_current_absolute\x18k \x01(\r\x12/\n\'max_allowed_in_flight_max_ever_absolute\x18l \x01(\r\x12\x1d\n\x15min_allowed_in_flight\x18m \x01(\r\x12\"\n\x1amax_low_pri_pkt_to_enqueue\x18n \x01(\r\x12\x17\n\x0fin_flight_dvlan\x18o \x01(\r\x12\x1c\n\x14in_flight_dvlan_peak\x18p \x01(\r\x12\x16\n\x0ein_flight_dhcp\x18q \x01(\r\x12\x1b\n\x13in_flight_dhcp_peak\x18r \x01(\r\x12\x15\n\rin_flight_ppp\x18s \x01(\r\x12\x1a\n\x12in_flight_ppp_peak\x18t \x01(\r\x12\x15\n\rin_flight_hag\x18u \x01(\r\x12\x1a\n\x12in_flight_hag_peak\x18v \x01(\r\x12\x17\n\x0fin_flight_total\x18w \x01(\r\x12\x1c\n\x14in_flight_total_peak\x18x \x01(\r\x12\x15\n\rin_nego_dvlan\x18y \x01(\r\x12\x1a\n\x12in_nego_dvlan_peak\x18z \x01(\r\x12\x14\n\x0cin_nego_dhcp\x18{ \x01(\r\x12\x19\n\x11in_nego_dhcp_peak\x18| \x01(\r\x12\x13\n\x0bin_nego_ppp\x18} \x01(\r\x12\x18\n\x10in_nego_ppp_peak\x18~ \x01(\r\x12\x13\n\x0bin_nego_hag\x18\x7f \x01(\r\x12\x19\n\x10in_nego_hag_peak\x18\x80\x01 \x01(\r\x12\x16\n\rin_nego_total\x18\x81\x01 \x01(\r\x12\x1b\n\x12in_nego_total_peak\x18\x82\x01 \x01(\r\x12\x1a\n\x11in_nego_overrides\x18\x83\x01 \x01(\r:O\n\x1ajnpr_debug_queue_stats_ext\x12\x17.JuniperNetworksSensors\x18& \x01(\x0b\x32\x12.debug_queue_stats"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

Debug_queue_stats = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("debug_queue_stats").msgclass
Debug_queue_stats::System_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("debug_queue_stats.system_type").msgclass
Debug_queue_stats::System_type::Subscriber_management_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("debug_queue_stats.system_type.subscriber_management_type").msgclass
Debug_queue_stats::System_type::Subscriber_management_type::Uplanes_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("debug_queue_stats.system_type.subscriber_management_type.uplanes_type").msgclass
Debug_queue_stats::System_type::Subscriber_management_type::Uplanes_type::Uplane_list = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane_list").msgclass
Debug_queue_stats::System_type::Subscriber_management_type::Uplanes_type::Uplane_list::Infra_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type").msgclass
Debug_queue_stats::System_type::Subscriber_management_type::Uplanes_type::Uplane_list::Infra_type::Era_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("debug_queue_stats.system_type.subscriber_management_type.uplanes_type.uplane_list.infra_type.era_type").msgclass
