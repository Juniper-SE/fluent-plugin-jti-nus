# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: agent.proto

require 'google/protobuf'


descriptor_data = "\n\x0b\x61gent.proto\x12\ttelemetry\"*\n\tCollector\x12\x0f\n\x07\x61\x64\x64ress\x18\x01 \x01(\t\x12\x0c\n\x04port\x18\x02 \x01(\r\"A\n\x11SubscriptionInput\x12,\n\x0e\x63ollector_list\x18\x01 \x03(\x0b\x32\x14.telemetry.Collector\"\xb1\x01\n\x04Path\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x0e\n\x06\x66ilter\x18\x02 \x01(\t\x12\x1a\n\x12suppress_unchanged\x18\x03 \x01(\x08\x12\x1b\n\x13max_silent_interval\x18\x04 \x01(\r\x12\x18\n\x10sample_frequency\x18\x05 \x01(\r\x12\x10\n\x08need_eom\x18\x06 \x01(\x08\x12\x0e\n\x06origin\x18\x64 \x01(\t\x12\x16\n\x0etarget_defined\x18\x65 \x01(\x08\"\x8e\x01\n\x1cSubscriptionAdditionalConfig\x12\x15\n\rlimit_records\x18\x01 \x01(\x05\x12\x1a\n\x12limit_time_seconds\x18\x02 \x01(\x05\x12\x10\n\x08need_eos\x18\x03 \x01(\x08\x12)\n\x04mode\x18\x04 \x01(\x0e\x32\x1b.telemetry.SubscriptionMode\"\xaa\x01\n\x13SubscriptionRequest\x12+\n\x05input\x18\x01 \x01(\x0b\x32\x1c.telemetry.SubscriptionInput\x12\"\n\tpath_list\x18\x02 \x03(\x0b\x32\x0f.telemetry.Path\x12\x42\n\x11\x61\x64\x64itional_config\x18\x03 \x01(\x0b\x32\'.telemetry.SubscriptionAdditionalConfig\"/\n\x14SubscriptionResponse\x12\x17\n\x0fsubscription_id\x18\x01 \x01(\r\"j\n\x11SubscriptionReply\x12\x31\n\x08response\x18\x01 \x01(\x0b\x32\x1f.telemetry.SubscriptionResponse\x12\"\n\tpath_list\x18\x02 \x03(\x0b\x32\x0f.telemetry.Path\"\xd2\x01\n\x08KeyValue\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\x16\n\x0c\x64ouble_value\x18\x05 \x01(\x01H\x00\x12\x13\n\tint_value\x18\x06 \x01(\x03H\x00\x12\x14\n\nuint_value\x18\x07 \x01(\x04H\x00\x12\x14\n\nsint_value\x18\x08 \x01(\x12H\x00\x12\x14\n\nbool_value\x18\t \x01(\x08H\x00\x12\x13\n\tstr_value\x18\n \x01(\tH\x00\x12\x15\n\x0b\x62ytes_value\x18\x0b \x01(\x0cH\x00\x12\x15\n\x0b\x66loat_value\x18\x0c \x01(\x02H\x00\x42\x07\n\x05value\"\x9a\x02\n\x0eOpenConfigData\x12\x11\n\tsystem_id\x18\x01 \x01(\t\x12\x14\n\x0c\x63omponent_id\x18\x02 \x01(\r\x12\x18\n\x10sub_component_id\x18\x03 \x01(\r\x12\x0c\n\x04path\x18\x04 \x01(\t\x12\x17\n\x0fsequence_number\x18\x05 \x01(\x04\x12\x11\n\ttimestamp\x18\x06 \x01(\x04\x12\x1f\n\x02kv\x18\x07 \x03(\x0b\x32\x13.telemetry.KeyValue\x12!\n\x06\x64\x65lete\x18\x08 \x03(\x0b\x32\x11.telemetry.Delete\x12\x1f\n\x03\x65om\x18\t \x03(\x0b\x32\x0e.telemetry.EomB\x02\x18\x01\x12\x15\n\rsync_response\x18\n \x01(\x08\x12\x0f\n\x07is_wrap\x18\x0b \x01(\x08\"\x16\n\x06\x44\x65lete\x12\x0c\n\x04path\x18\x01 \x01(\t\"\x13\n\x03\x45om\x12\x0c\n\x04path\x18\x01 \x01(\t\"4\n\x19\x43\x61ncelSubscriptionRequest\x12\x17\n\x0fsubscription_id\x18\x01 \x01(\r\"P\n\x17\x43\x61ncelSubscriptionReply\x12#\n\x04\x63ode\x18\x01 \x01(\x0e\x32\x15.telemetry.ReturnCode\x12\x10\n\x08\x63ode_str\x18\x02 \x01(\t\"2\n\x17GetSubscriptionsRequest\x12\x17\n\x0fsubscription_id\x18\x01 \x01(\r\"P\n\x15GetSubscriptionsReply\x12\x37\n\x11subscription_list\x18\x01 \x03(\x0b\x32\x1c.telemetry.SubscriptionReply\"c\n\x1aGetOperationalStateRequest\x12\x17\n\x0fsubscription_id\x18\x01 \x01(\r\x12,\n\tverbosity\x18\x02 \x01(\x0e\x32\x19.telemetry.VerbosityLevel\";\n\x18GetOperationalStateReply\x12\x1f\n\x02kv\x18\x01 \x03(\x0b\x32\x13.telemetry.KeyValue\"\x15\n\x13\x44\x61taEncodingRequest\"C\n\x11\x44\x61taEncodingReply\x12.\n\rencoding_list\x18\x01 \x03(\x0e\x32\x17.telemetry.EncodingType*G\n\nReturnCode\x12\x0b\n\x07SUCCESS\x10\x00\x12\x19\n\x15NO_SUBSCRIPTION_ENTRY\x10\x01\x12\x11\n\rUNKNOWN_ERROR\x10\x02*2\n\x0eVerbosityLevel\x12\n\n\x06\x44\x45TAIL\x10\x00\x12\t\n\x05TERSE\x10\x01\x12\t\n\x05\x42RIEF\x10\x02*A\n\x0c\x45ncodingType\x12\r\n\tUNDEFINED\x10\x00\x12\x07\n\x03XML\x10\x01\x12\r\n\tJSON_IETF\x10\x02\x12\n\n\x06PROTO3\x10\x03*9\n\x10SubscriptionMode\x12\x0e\n\nLONG_LIVED\x10\x00\x12\x0b\n\x07ONE_OFF\x10\x01\x12\x08\n\x04POLL\x10\x02\x32\xfc\x03\n\x13OpenConfigTelemetry\x12S\n\x12telemetrySubscribe\x12\x1e.telemetry.SubscriptionRequest\x1a\x19.telemetry.OpenConfigData\"\x00\x30\x01\x12i\n\x1b\x63\x61ncelTelemetrySubscription\x12$.telemetry.CancelSubscriptionRequest\x1a\".telemetry.CancelSubscriptionReply\"\x00\x12\x63\n\x19getTelemetrySubscriptions\x12\".telemetry.GetSubscriptionsRequest\x1a .telemetry.GetSubscriptionsReply\"\x00\x12l\n\x1cgetTelemetryOperationalState\x12%.telemetry.GetOperationalStateRequest\x1a#.telemetry.GetOperationalStateReply\"\x00\x12R\n\x10getDataEncodings\x12\x1e.telemetry.DataEncodingRequest\x1a\x1c.telemetry.DataEncodingReply\"\x00\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Telemetry
  Collector = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.Collector").msgclass
  SubscriptionInput = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.SubscriptionInput").msgclass
  Path = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.Path").msgclass
  SubscriptionAdditionalConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.SubscriptionAdditionalConfig").msgclass
  SubscriptionRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.SubscriptionRequest").msgclass
  SubscriptionResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.SubscriptionResponse").msgclass
  SubscriptionReply = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.SubscriptionReply").msgclass
  KeyValue = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.KeyValue").msgclass
  OpenConfigData = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.OpenConfigData").msgclass
  Delete = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.Delete").msgclass
  Eom = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.Eom").msgclass
  CancelSubscriptionRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.CancelSubscriptionRequest").msgclass
  CancelSubscriptionReply = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.CancelSubscriptionReply").msgclass
  GetSubscriptionsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.GetSubscriptionsRequest").msgclass
  GetSubscriptionsReply = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.GetSubscriptionsReply").msgclass
  GetOperationalStateRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.GetOperationalStateRequest").msgclass
  GetOperationalStateReply = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.GetOperationalStateReply").msgclass
  DataEncodingRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.DataEncodingRequest").msgclass
  DataEncodingReply = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.DataEncodingReply").msgclass
  ReturnCode = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.ReturnCode").enummodule
  VerbosityLevel = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.VerbosityLevel").enummodule
  EncodingType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.EncodingType").enummodule
  SubscriptionMode = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("telemetry.SubscriptionMode").enummodule
end
