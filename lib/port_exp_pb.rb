# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: port_exp.proto

require 'google/protobuf'

require 'telemetry_top_pb'


descriptor_data = "\n\x0eport_exp.proto\x1a\x13telemetry_top.proto\":\n\x08Port_exp\x12.\n\x12interfaceExp_stats\x18\x01 \x03(\x0b\x32\x12.InterfaceExpInfos\"J\n\x11InterfaceExpInfos\x12\x16\n\x07if_name\x18\x01 \x02(\tB\x05\x82@\x02\x08\x01\x12\x1d\n\x15if_operational_status\x18\x02 \x01(\t:B\n\x16jnpr_interface_exp_ext\x12\x17.JuniperNetworksSensors\x18\x12 \x01(\x0b\x32\t.Port_exp"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

Port_exp = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("Port_exp").msgclass
InterfaceExpInfos = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("InterfaceExpInfos").msgclass
