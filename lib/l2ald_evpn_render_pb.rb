# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: l2ald_evpn_render.proto

require 'google/protobuf'

require 'telemetry_top_pb'


descriptor_data = "\n\x17l2ald_evpn_render.proto\x1a\x13telemetry_top.proto\"\xba\x06\n\x18network_instances_l2evpn\x12J\n\x10network_instance\x18\xa1\x01 \x03(\x0b\x32/.network_instances_l2evpn.network_instance_list\x1a\xd1\x05\n\x15network_instance_list\x12\x13\n\x04name\x18\x33 \x01(\tB\x05\x82@\x02\x08\x01\x12R\n\tprotocols\x18\x97\x01 \x01(\x0b\x32>.network_instances_l2evpn.network_instance_list.protocols_type\x1a\xce\x04\n\x0eprotocols_type\x12_\n\x08protocol\x18\x97\x01 \x01(\x0b\x32L.network_instances_l2evpn.network_instance_list.protocols_type.protocol_type\x1a\xda\x03\n\rprotocol_type\x12\x65\n\x04\x65vpn\x18\x97\x01 \x01(\x0b\x32V.network_instances_l2evpn.network_instance_list.protocols_type.protocol_type.evpn_type\x1a\xe1\x02\n\tevpn_type\x12\x93\x01\n\x16vxlan_tunnel_end_point\x18\x98\x01 \x03(\x0b\x32r.network_instances_l2evpn.network_instance_list.protocols_type.protocol_type.evpn_type.vxlan_tunnel_end_point_list\x1a\xbd\x01\n\x1bvxlan_tunnel_end_point_list\x12\x19\n\x11source_ip_address\x18\x33 \x01(\t\x12 \n\x11remote_ip_address\x18\x34 \x01(\tB\x05\x82@\x02\x08\x01\x12\x0e\n\x06status\x18\x35 \x01(\t\x12\x0c\n\x04mode\x18\x36 \x01(\t\x12\x15\n\rnexthop_index\x18\x37 \x01(\r\x12\x18\n\x10source_interface\x18\x38 \x01(\t\x12\x12\n\nevent_type\x18\x39 \x01(\t:]\n!jnpr_network_instances_l2evpn_ext\x12\x17.JuniperNetworksSensors\x18t \x01(\x0b\x32\x19.network_instances_l2evpn"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

Network_instances_l2evpn = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("network_instances_l2evpn").msgclass
Network_instances_l2evpn::Network_instance_list = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("network_instances_l2evpn.network_instance_list").msgclass
Network_instances_l2evpn::Network_instance_list::Protocols_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("network_instances_l2evpn.network_instance_list.protocols_type").msgclass
Network_instances_l2evpn::Network_instance_list::Protocols_type::Protocol_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("network_instances_l2evpn.network_instance_list.protocols_type.protocol_type").msgclass
Network_instances_l2evpn::Network_instance_list::Protocols_type::Protocol_type::Evpn_type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("network_instances_l2evpn.network_instance_list.protocols_type.protocol_type.evpn_type").msgclass
Network_instances_l2evpn::Network_instance_list::Protocols_type::Protocol_type::Evpn_type::Vxlan_tunnel_end_point_list = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("network_instances_l2evpn.network_instance_list.protocols_type.protocol_type.evpn_type.vxlan_tunnel_end_point_list").msgclass
