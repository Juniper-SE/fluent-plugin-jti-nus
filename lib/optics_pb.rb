# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: optics.proto

require 'google/protobuf'

require 'telemetry_top_pb'


descriptor_data = "\n\x0coptics.proto\x1a\x13telemetry_top.proto\"+\n\x06Optics\x12!\n\x0bOptics_diag\x18\x01 \x03(\x0b\x32\x0c.OpticsInfos\"i\n\x0bOpticsInfos\x12\x16\n\x07if_name\x18\x01 \x02(\tB\x05\x82@\x02\x08\x01\x12\x15\n\rsnmp_if_index\x18\x02 \x01(\r\x12+\n\x11optics_diag_stats\x18\x03 \x01(\x0b\x32\x10.OpticsDiagStats\"\xb9\n\n\x0fOpticsDiagStats\x12\x13\n\x0boptics_type\x18\x01 \x01(\r\x12\x1a\n\x0bmodule_temp\x18\x02 \x01(\x01\x42\x05\x82@\x02 \x01\x12/\n module_temp_high_alarm_threshold\x18\x03 \x01(\x01\x42\x05\x82@\x02 \x01\x12.\n\x1fmodule_temp_low_alarm_threshold\x18\x04 \x01(\x01\x42\x05\x82@\x02 \x01\x12\x31\n\"module_temp_high_warning_threshold\x18\x05 \x01(\x01\x42\x05\x82@\x02 \x01\x12\x30\n!module_temp_low_warning_threshold\x18\x06 \x01(\x01\x42\x05\x82@\x02 \x01\x12:\n+laser_output_power_high_alarm_threshold_dbm\x18\x07 \x01(\x01\x42\x05\x82@\x02 \x01\x12\x39\n*laser_output_power_low_alarm_threshold_dbm\x18\x08 \x01(\x01\x42\x05\x82@\x02 \x01\x12<\n-laser_output_power_high_warning_threshold_dbm\x18\t \x01(\x01\x42\x05\x82@\x02 \x01\x12;\n,laser_output_power_low_warning_threshold_dbm\x18\n \x01(\x01\x42\x05\x82@\x02 \x01\x12\x36\n\'laser_rx_power_high_alarm_threshold_dbm\x18\x0b \x01(\x01\x42\x05\x82@\x02 \x01\x12\x35\n&laser_rx_power_low_alarm_threshold_dbm\x18\x0c \x01(\x01\x42\x05\x82@\x02 \x01\x12\x38\n)laser_rx_power_high_warning_threshold_dbm\x18\r \x01(\x01\x42\x05\x82@\x02 \x01\x12\x37\n(laser_rx_power_low_warning_threshold_dbm\x18\x0e \x01(\x01\x42\x05\x82@\x02 \x01\x12\x36\n\'laser_bias_current_high_alarm_threshold\x18\x0f \x01(\x01\x42\x05\x82@\x02 \x01\x12\x35\n&laser_bias_current_low_alarm_threshold\x18\x10 \x01(\x01\x42\x05\x82@\x02 \x01\x12\x38\n)laser_bias_current_high_warning_threshold\x18\x11 \x01(\x01\x42\x05\x82@\x02 \x01\x12\x37\n(laser_bias_current_low_warning_threshold\x18\x12 \x01(\x01\x42\x05\x82@\x02 \x01\x12\x1e\n\x16module_temp_high_alarm\x18\x13 \x01(\x08\x12\x1d\n\x15module_temp_low_alarm\x18\x14 \x01(\x08\x12 \n\x18module_temp_high_warning\x18\x15 \x01(\x08\x12\x1f\n\x17module_temp_low_warning\x18\x16 \x01(\x08\x12\x34\n\x16optics_lane_diag_stats\x18\x17 \x03(\x0b\x32\x14.OpticsDiagLaneStats\x12\x1a\n\x12wavelength_channel\x18\x18 \x01(\t\x12\x1b\n\x13wavelength_setpoint\x18\x19 \x01(\t\x12\x11\n\ttx_dither\x18\x1a \x01(\t\x12\x17\n\x0f\x66requency_error\x18\x1b \x01(\t\x12\x18\n\x10wavelength_error\x18\x1c \x01(\t\x12\x11\n\ttec_fault\x18\x1d \x01(\t\x12\x18\n\x10w_unlocked_alarm\x18\x1e \x01(\t\x12\x15\n\rtx_tune_alarm\x18\x1f \x01(\t\"\xaf\x07\n\x13OpticsDiagLaneStats\x12\x1a\n\x0blane_number\x18\x01 \x01(\rB\x05\x82@\x02\x08\x01\x12%\n\x16lane_laser_temperature\x18\x02 \x01(\x01\x42\x05\x82@\x02 \x01\x12*\n\x1blane_laser_output_power_dbm\x18\x03 \x01(\x02\x42\x05\x82@\x02 \x01\x12,\n\x1dlane_laser_receiver_power_dbm\x18\x04 \x01(\x02\x42\x05\x82@\x02 \x01\x12\x1f\n\x17lane_laser_bias_current\x18\x05 \x01(\x01\x12*\n\"lane_laser_output_power_high_alarm\x18\x06 \x01(\x08\x12)\n!lane_laser_output_power_low_alarm\x18\x07 \x01(\x08\x12,\n$lane_laser_output_power_high_warning\x18\x08 \x01(\x08\x12+\n#lane_laser_output_power_low_warning\x18\t \x01(\x08\x12,\n$lane_laser_receiver_power_high_alarm\x18\n \x01(\x08\x12+\n#lane_laser_receiver_power_low_alarm\x18\x0b \x01(\x08\x12.\n&lane_laser_receiver_power_high_warning\x18\x0c \x01(\x08\x12-\n%lane_laser_receiver_power_low_warning\x18\r \x01(\x08\x12*\n\"lane_laser_bias_current_high_alarm\x18\x0e \x01(\x08\x12)\n!lane_laser_bias_current_low_alarm\x18\x0f \x01(\x08\x12,\n$lane_laser_bias_current_high_warning\x18\x10 \x01(\x08\x12+\n#lane_laser_bias_current_low_warning\x18\x11 \x01(\x08\x12$\n\x1clane_tx_loss_of_signal_alarm\x18\x12 \x01(\x08\x12$\n\x1clane_rx_loss_of_signal_alarm\x18\x13 \x01(\x08\x12$\n\x1clane_tx_laser_disabled_alarm\x18\x14 \x01(\x08\x12\"\n\x13media_fec_corr_bits\x18\x15 \x01(\x04\x42\x05\x82@\x02\x18\x01\x12&\n\x17media_fec_uncorr_blocks\x18\x16 \x01(\x04\x42\x05\x82@\x02\x18\x01:9\n\x0fjnpr_optics_ext\x12\x17.JuniperNetworksSensors\x18\n \x01(\x0b\x32\x07.Optics"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

Optics = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("Optics").msgclass
OpticsInfos = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("OpticsInfos").msgclass
OpticsDiagStats = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("OpticsDiagStats").msgclass
OpticsDiagLaneStats = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("OpticsDiagLaneStats").msgclass
